4) grep
-matching
-대소문자 구분함
-라인 전체를 출력한다.
Q. The가 있는 txt파일을 전체 조회하라:
- -v : 조건 문자열이 없는 라인 출력

Q. /user/lib에 포함된 하위 디렉터리 개수 알아내기
 ls -l /user/lib | grep d | wc -l (x)

5) sort
-정렬, 오름차순 (abcd...)
-r (reversed)
- 숫자 정렬 (-n)
 sort -n -r sample.txt
 sort -nr sample.txt
 Q1. animals.txt 3번째 필드가 숫자 => 오름차순 정렬해서 출력하자.
 Q2. 최소값, 최대값 출력하기

 Q3. /etc/passwd 디렉터리에서 사용자 이름 정렬하여 추출하기.
 - :로 구분된 필드 중 1번째 == 사용자
 - 전체 출력하기 
 Q4. 사용자 중 root가 있는지 확인하기 (존재하는 라인만 출력0)
  |grep root
  -Root, root, Root
  -root 'abcdroot'
  - _root_ => -w

  Q5. ls, head

  -ls :파일, 디렉터리 목록
  -head :파일 내용 조회

  # letters 내용 조회하기
  6) uniq 
  -중복된 문자열을 제거해서 보여주되, 인접한 중복 문자열만

  Q. 성적표 (grades 파일)에서 가장 빈번하지 않은 등급부터 출력하기.

  uniq -c grades.txt | sort -nr | head -n1
  cut -f1 grades | sort |uniq -c |sort -n
  uniq grades | sort -r |cut -f1
  uniq -c grades | sort -nr
  sort -r grades | cut -f1 | uniq -c| head -n1

--------------
#1. 버전 관리
- 파일의 변화를 시간에 따라 저장했다가 나중에 특정 시점의 버전으로 다시 꺼내올 수 있는 시스템
- 협업
- 툴: 깃

#2. 깃
- 데이터 저장 방식: 스냅샷
- 오프라인에서도 저장가능
  - if 빈 -> 텍스트 입력
  - 키(key)- 밸류(value)
    - 키는 고유하다. (해시)
    - 밸류 (텍스트)

- 깃 상태
  - 수정
  - 커밋: 저장
  - 스테이지: 스냅샷 찍어서 커밋할 준비가 된 상태

  -수정
  -스테이징 -> 커맛

- 깃 커밋 순서:
  상태체크 -> (수정) -> 스테이징 -> 커밋
  ....

1) 버전 체크
  git --version
    *git -v --version
    ls -l
    ls --list (x)

2) 사용자 정보 설정하기 
  - name
  - email
  - 옵션: --global: 전체 시스템에 영향을 준다.
    - 프로잭트마다 다른 이름을 사용하고 싶을 경우는 옵셥을 재외

-core.editor
  -vi 빠져나올 때는 q + enter

  -git help <프로그명령>

  #디렉터리 (directory)
  - 우리가 말하는 '폴더'
  - 트리구조를 가진
  animals/
  